#!/usr/bin/env python2
# Hack for dynamic DNS IPSec Site-to-Site VPN
# This script should be scheduled to run periodically to re-establish VPN on IP change
# See https://blog.azureinfra.com/2018/12/31/usg-vpns-and-dynamic-ips/
#
# This is a helper utility to be paired with the shell script

import json
import sys
import argparse
import subprocess
import socket


def flatten_config(config):
    rv = []
    for key, value in config.items():
        if isinstance(value, dict):
            for inner_key, inner_value in flatten_config(value):
                rv.append((key + ' ' + inner_key, inner_value))
        else:
            rv.append((key, value))
    return rv


def load_config(args):
    if args.config_json is None:
        result = subprocess.check_output(['mca-ctrl', '-t', 'dump-cfg']).decode('utf8')
        return json.loads(result)

    elif args.config_json == '-':
        return json.load(sys.stdin)

    else:
        with open(args.config_json) as f:
            return json.load(f)


def get_entry(config, ike_group):
    for peer, config in config['vpn']['ipsec']['site-to-site']['peer'].items():
        if config['ike-group'] == ike_group:
            return (peer, config)

    raise Exception("No config found for IKE group: {}".format(ike_group))


def get_peer_address_impl(args):
    config = load_config(args)
    peer, _ = get_entry(config, args.ike_group)
    print(peer)


def get_local_address_impl(args):
    config = load_config(args)
    _, entry = get_entry(config, args.ike_group)
    print(entry['local-address'])


def get_config_impl(args):
    config = load_config(args)
    peer, entry = get_entry(config, args.ike_group)

    new_entry = dict(entry)
    new_entry['local-address'] = args.new_local_address
    new_entry['description'] = 'Generated by dyn-s2s-tool'

    for key, value in flatten_config(new_entry):
        print("vpn ipsec site-to-site peer {} {} '{}'".format(
            args.new_peer_address, key, value))


def lookup_impl(args):
    print(socket.gethostbyname(args.hostname))


def add_common_args(parser):
    parser.add_argument('ike_group')
    parser.add_argument('--config-json')


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Dynamic DNS IPSec Hack')

    subparsers = parser.add_subparsers(help='sub-command help')
    get_peer_address = subparsers.add_parser('get-peer-address')
    add_common_args(get_peer_address)
    get_peer_address.set_defaults(func=get_peer_address_impl)

    get_local_address = subparsers.add_parser('get-local-address')
    add_common_args(get_local_address)
    get_local_address.set_defaults(func=get_local_address_impl)

    get_config = subparsers.add_parser('get-config')
    add_common_args(get_config)
    get_config.add_argument('--new-peer-address', required=True)
    get_config.add_argument('--new-local-address', required=True)
    get_config.set_defaults(func=get_config_impl)

    lookup = subparsers.add_parser('lookup')
    lookup.add_argument('hostname')
    lookup.set_defaults(func=lookup_impl)

    args = parser.parse_args()
    args.func(args)
